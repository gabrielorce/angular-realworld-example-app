name: bg-tests

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment

      node-version:
        description: Optionally pass the Node version. default value is 20.5.0
        required: false
        type: string
        default: 20.5.0
      
      build-cmd:
        description: Optionally pass npm build command. default value is 'npm run build'
        required: false
        type: string
        default: npm run build

jobs:
  deploy_to_staging:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-s3-bucket-url:  ${{ secrets.AWS_S3_BUCKET_URL }}
        aws-region: us-east-1

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install dependencies
      run: npm install

    - name: Build Library
      run: ${{ inputs.build-cmd }}

    - name: Deploy to Staging
      run: |
        STAGING_S3_BUCKET=$(aws cloudfront get-distribution --id ${{ vars.STAGING_CLOUDFRONT_ID }} | jq -r '.Distribution.DistributionConfig.Origins.Items[0].DomainName')
        echo $STAGING_S3_BUCKET
        echo "STAGING - Version 33" > index.html 
        aws s3 cp index.html  s3://z-angular-app/
        aws cloudfront create-invalidation --distribution-id ${{ vars.STAGING_CLOUDFRONT_ID }} --paths "/*"



  promote_staging:
    runs-on: ubuntu-latest
    environment: PRODUCTION  
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-east-1

      
    - name: Promote Staging to PROD
      run: |
        echo "PRODUCTION!"
        PRIMARY_ETAG=`aws cloudfront get-distribution-config --id ${{ vars.PROD_CLOUDFRONT_ID }} --query 'ETag' --output text`
        STAGING_ETAG=`aws cloudfront get-distribution-config --id ${{ vars.STAGING_CLOUDFRONT_ID }} --query 'ETag' --output text`
        echo $PRIMARY_ETAG $STAGING_ETAG
        aws cloudfront update-distribution-with-staging-config --id ${{ vars.PROD_CLOUDFRONT_ID }} --staging-distribution-id  ${{ vars.STAGING_CLOUDFRONT_ID }} --if-match "$PRIMARY_ETAG,$STAGING_ETAG"
